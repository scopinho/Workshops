---
title: "Expressões Regulares (Regex) no R"
author: "Eric Scopinho"
lang: pt
output-file: index.html
logo: images/tidyverse-hex-stiker.jpg
footer: "Expressões Regulares (Regex) no R"
df-print: paged
chalkboard: true
editor: visual
execute: 
  echo: true
  eval: true
  warning: false
format: 
  revealjs: 
    slide-number: true
#    number-sections: true
    smaller: true
    scrollable: true
#    parallax-background-image: "images/bg2.png"
#    parallax-background-size: "contain"
#    background-repeat: "no-repeat"
#    backgrond-size: "cover"
#    background-image: "images/bg2.png"
    theme: [default, custom.css]
    title-slide-attributes: 
      data-background-image: images/bg.png
#  pptx:
#    reference-doc: template.pptx
---

## Introdução

**Expressão Regular** é uma sequência de caracteres que especificam um padrão de busca em uma string (cadeia de caracteres.

No R, você escreve uma expressão regular como uma **string**, ou seja, uma sequência de caracteres entre aspas simples ' ou duplas ".

```{r}
minha_string <- "Isto é uma string"
minha_string
```

## Expressões Regulares no R

Alguns caracteres de uma expressão regular não podem ser representados diretamente como uma string no R. Estes são conhecidos como **caracteres especiais** e são uma sequência de caracteres que tem um significado específico.

Devido a isto, sempre que aparecer uma barra invertida ( \\ ) em uma expressão regular, você deve digitar duas barras ( \\\\ ) na strings da expressão.

::: columns
::: {.column width="60%"}
Por exemplo:

| Caracteres Especiais | Representa |
|----------------------|------------|
| \\\\                 | \\         |
| \\"                  | "          |
| \\?                  | ?          |
:::

::: {.column width="40%"}
Use a função **writeLines**() para ver como o R vê sua string depois dos caracteres especiais forem lido.

```{r}
writeLines("\\.")
```
:::
:::

. . .

::: callout-tip
Para obter a lista completa, digite ? "'".
:::

::: notes
Lembrar de comentar as diferenças do R.
:::

## Buscando letras

A função **str_extract**() (pacote stringr) aceita uma expressão regular como argumento.

Iremos definir nossa expressão regular (**padrão de busca**) como a a letra "**a**".

Desta forma, se passarmos para a função str_extract() a string "**Banana**" e o padrão "**a**", ele deve retornar a letra "a", pois a string Banana possui a letra "a".

```{r}
#| code-line-numbers: "2"
library (stringr)
str_extract ("Banana", "a")
```

Por outro lado, se passarmos a string "Fig" com o mesmo padrão de busca, teremos NA como retorno, pois a string "Fig" não possui a letra "a".

```{r}
str_extract ("Fig", "a")
```

. . .

::: callout-tip
O pacte stringr, possui diversas funções para extração, detecção, remoção e substituição de strings que aceitam regex. Em geral elas comçam com **str\_**\*. Para maiores informações digite: ?stringr
:::

## String de Teste

Para facilitar o entendimento, utilizaremos uma string com letras maiúsculas, minúsculas, símbolos e números:

```{r}
Str_Teste <- "abc ABC 123\t.!?\\(){}\n"
Str_Teste
```

## Tabela caracteres especiais

Vamos mostrar como usar a tabela abaixo com alguns exemplos. Para isso, iremos usar a string criada anteriormente chamada "Str_Teste".

+--------------------------+---------------------------------------------------------+
| String Regex no R        | Busca por                                               |
+==========================+=========================================================+
| a                        | a (etc.)                                                |
+--------------------------+---------------------------------------------------------+
| \\\\.                    | .                                                       |
+--------------------------+---------------------------------------------------------+
| \\\\!                    | \\!                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\?                    | \\?                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\\\\\                 | \\\\                                                    |
+--------------------------+---------------------------------------------------------+
| \\\\(                    | \\(                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\)                    | \\)                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\{                    | \\{                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\}                    | \\}                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\n                    | nova linha (ENTER)                                      |
+--------------------------+---------------------------------------------------------+
| \\\\t                    | TAB                                                     |
+--------------------------+---------------------------------------------------------+
| \\\\s                    | qualquer caractere em branco                            |
+--------------------------+---------------------------------------------------------+
| \\\\d                    | qualquer digito                                         |
+--------------------------+---------------------------------------------------------+
| \\\\w                    | qualquer letra                                          |
+--------------------------+---------------------------------------------------------+
| \\\\b                    | barra de espaço                                         |
+--------------------------+---------------------------------------------------------+
| \[:digit:\]              | digitos                                                 |
+--------------------------+---------------------------------------------------------+
| \[:alpha:\]              | letras                                                  |
+--------------------------+---------------------------------------------------------+
| \[:lower:\]              | letras minúsculas                                       |
+--------------------------+---------------------------------------------------------+
| \[:upper:\]              | letras maiúsculas                                       |
+--------------------------+---------------------------------------------------------+
| \[:alnum:\]              | letras e números                                        |
+--------------------------+---------------------------------------------------------+
| \[:punct:\]              | pontuação                                               |
+--------------------------+---------------------------------------------------------+
| \[:graph:\]              | letras, números e pontuação                             |
+--------------------------+---------------------------------------------------------+
| \[:space:\]              | qualquer espaço em branco                               |
+--------------------------+---------------------------------------------------------+
| \[:blank:\]              | espaço em branco e barra de espaço (mas não nova linha) |
+--------------------------+---------------------------------------------------------+
| .                        | qualquer caractere exceto nova linha (ENTER)            |
+--------------------------+---------------------------------------------------------+

## Exemplo 1

Vamos buscar em nossa string de teste (Str_Teste) a letra minúscula "a".

Na coluna da tabela anterior chamada **String**, encontramos o que devemos digitar para construir o padrão de busca. Neste caso, seria "a".

Se usarmos a função **str_view_all**() (pacote stringr) passando nossa "Str_Teste" e o padrão de busca "a", observamos que teremos marcado apenas a letra "a" na string. Isto significa que o padrão de busca foi encontrado na string.

```{r}
str_view_all (Str_Teste, "a")
```

## Exemplo 2

Vamos buscar agora pelo padrão do símbolo de ponto de interrogação "?". Similar ao exemplo anterior, vemos que apenas o ponto de interrogação foi encontrado.

```{r}
str_view_all (Str_Teste, "\\?")
```

## Exemplo 3

Vamos criar agora um padrão que busque por todos os digitos em nossa string.

```{r}
str_view_all (Str_Teste, "\\d")
```

::: callout-tip
Para buscarmos pelo inverso do caso anterior, ou seja, todos os caracteres que NÃO são digitos, usamos a letra "D" maiúscula. Isto é válido também para os casos de "\\\\S" e "\\\\W" que seriam o inverso de "\\\\s" e "\\\\w" respectivamente.
:::

```{r}
str_view_all (Str_Teste, "\\D")
```

## Exemplo 4

Vamos criar agora um padrão que busque por todos os digitos e letras em nossa string.

```{r}
str_view_all (Str_Teste, "[:alnum:]")
```

## Quantificadores

Agora que já saber como criar padrões de busca para identificar diversos tipos de caracteres, veremos como difinir a quantidade desses caracteres em nosso padrão. Veja a tabela abaixo:

| Regex       | Busca               |
|-------------|---------------------|
| **?**       | Zero ou um          |
| **\***      | Zero ou mais        |
| **+**       | Um ou mais          |
| **{*n*}**   | Exatamente **n**    |
| **{*n,}***  | **n** ou mais       |
| **{*n,m}*** | Entre **n** e **m** |

Vamos ver como utilizamos estes quantificadores juntamente com os caracteres especiais vistos anteriormente.

## String de Teste

Para os exemplos a seguir utilizaremos a seguinte string de teste:

Str_Teste_2 = ".a.aa.aaa"

```{r}
Str_Teste_2 <- ".a.aa.aaa"
Str_Teste_2 
```

Para a maioria dos exemplos utilizaremos as bases de dados **frutas** que será criada a seguir:

```{r}
#| echo: false

library(tidyverse)

frutas <- tibble(name = c("Apple", "Apricot", "Avocado",
                         "Banana", "Blackberry", "Blueberry",
                         "Cherry", "Coconut",
                         "Custard-Apple", "Dragonfruit",
                         "Fig", "Gooseberry", "Grapes",
                         "Guava", "Jackfruit", "Java Plum",
                         "Kiwifruit", "Lime", "Mango",
                         "MuskMelon", "Olives", "Orange",
                         "Papaya", "Peach", "Pear",
                         "Pineapple", "Pomegranate",
                         "Strawberry", "Tamarind",
                         "Watermelon"))

# Nova coluna com uma string qualquer 
col_nova <- bind_cols(c(letters, LETTERS), seq(1:52), seq(1:52), c(letters, LETTERS))
col_nova <- col_nova |> 
  unite(nova_string, names(col_nova)) |> 
  slice (n = 1:30) 
frutas <- bind_cols (frutas, col_nova)
```

```{r}
frutas
```

## Exemplo 1

Buscando na string de teste "Str_Teste_2" a letra "a" **ZERO** ou **UMA** vez, usando a função **str_view_all**():

```{r}
str_view_all(Str_Teste_2, "a?")
```

Neste caso, todas as vezes que a funções encontrar a letra "a" zero ou uma vez, elá irá marcar.

Se usarmos a função **str_view**() ela irá utilizar o padrão apenas até o primeiro encontro e depois irá parar a busca

```{r}
str_view(Str_Teste_2, "a?")
```

Observe que a busca para logo no primeiro caractere, pois estamos buscando pela letra "a" **ZERO** ou mais vezes.

## Exemplo 2

Agora vamos iremos buscar pela letra "a" **UMA ou MAIS** vezes, porém iremos utilizar a função str_view() ou invés da str_view_all(), parando a busca assim que o primeiro encontro ocorra:

```{r}
str_view(Str_Teste_2, "a+")
```

## Exemplo 3

Neste exemplo, queremos criar um padrão de busca pela letra "a", mas que ela ocorra **DUAS** a **TRÊS** vezes.

```{r}
str_view(Str_Teste_2, "a{2,3}")
```

Veja que ele localizou apenas as duas letras "aa" e não marcou as letras "aaa". Isto é porque utilizamos a função str_view(), que parou a busca assim que a primeiro encontro ocorreu. Se quisermos continuar a busca, devemos utilizar a função **str_view_all**().

```{r}
str_view_all(Str_Teste_2, "a{2,3}")
```

## Exemplo 4

Neste exemplo, usaremos a tabela frutas, criada anteriormente.

```{r}
#| code-line-numbers: 1-1
frutas |> 
  head(4) 
```

Digamos que precisamos extrair **apenas os numeros** da coluna "**nova_string**". E colocá-los em uma nova coluna chamada "**numeros**".

------------------------------------------------------------------------

-   **Passo 1:** Usar a função **str_extract**() com um padrão que encontre um número de **0 até 9**, seguido por **um ou mais** "qualquer caractere". Depois outro número de 0 até 9. Este padrão irá encontrar padrões como "1_1" ou "2_2".

-   **Passo 2:** Usar um outro padrão **\[:punct:\]** na função **str_remove**() para remover a pontuação.

```{r}
#| code-line-numbers: 2-3
frutas |> 
  mutate (numeros = str_extract(nova_string, "[0-9].+[0-9]")) |> 
  mutate (numeros = str_remove(numeros, "[:punct:]")) |> 
head(4)
```

## Alternadores

Até aqui, utilizamos os caracteres especiais e sabemos como localizá-los em diversas quantidades. Mas em muitos casos precisamos organizá-los de forma lógica, possibilitando utilizá-los em combinações mais flexíveis. Para isto, utilizamos os símbolos de **alternadores**:

| Regex           | Busca       |
|-----------------|-------------|
| **\|**          | OU          |
| **\[** **\]**   | Um dos      |
| **\[\^** **\]** | Tudo exceto |
| **\[ - \]**     | Range       |

Para os exemplos a seguir utilizaremos a seguinte string de teste: Str_Teste_3 = "abcde"

```{r}
Str_Teste_3 <- "abcde"
Str_Teste_3
```

## Exemplo 1

Digamos que desejamos criar um padrão que busque pela letras "ab" **OU** a letra "d", para isto podemos usar:

```{r}
str_view_all(Str_Teste_3, "ab|d")
```

## Exemplo 2

Digamos que desejamos criar um padrão que busque qualquer **um dos** caracteres "abe", para isto podemos usar:

```{r}
str_view_all(Str_Teste_3, "[abe]")
```

## Exemplo 3

Digamos que desejamos criar um padrão que busque qualquer um **range** de letras entre as letras "a" até a "c", para isto podemos usar:

```{r}
str_view_all(Str_Teste_3, "[a-c]")
```

## Exemplo 4

Neste exemplo, usaremos novamente a tabela **frutas**.

Digamos que precisamos filtrar nesta tabela, apenas as frutas que possuem nomes compostos, ou seja, separados por espaço ou uma pontuação (ex "-").

Podemos usar a função **filter**() passando o resultado da função **str_detect**() junto com um padrão. Há diversas maneiras de construir este padrão. Aqui optamos por buscar por caracteres alfa-numéricos (letras e números) e usamos o alternador \[\^ \] para negar tais caracteres. Portanto, iremos identificar se a string **NÃO possui** letras ou números.

```{r}
#| code-line-numbers: 2-2
frutas |> 
  filter (str_detect(name, "[^[:alnum:]]")) 
```

## Ancoragem

Para definir se a sequência do padrão de busca está no início ou fim da string, utilizamos as expressões de ancoragem:

| Regex  | Busca            |
|--------|------------------|
| **\^** | Início da string |
| **\$** | Fim da string    |

Para os exemplos a seguir utilizaremos a seguinte string de teste: Str_Teste_4 = "aaa"

```{r}
Str_Teste_4 <- "aaa"
Str_Teste_4
```

## Exemplo 1

Para criar um padrão que busque a letra "a" apenas no **fim** da string, usamos:

```{r}
str_view_all(Str_Teste_4, "a$")
```

## Exemplo 2

Para criar um padrão que busque a letra "a" apenas no **início** da string, usamos:

```{r}
str_view_all(Str_Teste_4, "^a")
```

## Exemplo 3

Neste exemplo, usaremos novamente a tabela **frutas**.

Digamos que queremos filtrar apenas as frutas que **terminem** com a letra "**a**" **E** também que terminem com a letra "**o**". Podemos fazer:

```{r}
frutas |> 
  filter (str_detect(name, "[ao]$")) 
```

## Grupos

Você pode utilizar **parênteses** **(** **)** para definir expressões de **precedência** ou para serem **referenciados** posteriormente através da **ordem de criação**.

Para os exemplos a seguir utilizaremos a seguinte string de teste: Str_Teste_5 = "abbaab"

```{r}
Str_Teste_5 <- "abbaab"
Str_Teste_5
```

## Exemplo 1

Digamos que tenhamos a string "Blueberry" e você queira criar um padrão que busque pela letra "e" precedida das letras "lu" OU "b".

Neste caso, devemos criar um grupo de precedência para "lu" OU "b". Para isto iremos colocar esta parte da expressão entre parênteses (lu\|b). agora podemos utilzar este grupo e concluir o padrão de busca conforme a seguir:

```{r}
str_view_all("Blueberry", "(lu|b)e")
```

Veja que se nossa string fosse "Blueberry is special", a letra "e" de "special" não seria encontrada:

```{r}
str_view_all("Blueberry is special", "(lu|b)e")
```

Se quisermos criar um padrão que encontre a letra "e" precedida de qualquer letra, podemos fazer:

```{r}
str_view_all("Blueberry is special", "([:alpha:])e")
```

## Exemplo 2

Ao criar um grupo, como vimos no exemplo anterior, podemos fazer referência à este grupo usando **\\\\*n*,** on ***n*** é a ordem de criação do grupo.

Digamos que criamos um grupo utilizando os parênteses ( ) que contenha apenas letra "a". Seu código ficaria **(a)**, e ele poderia ser referenciado com \\**\\1**, pois foi o primeiro grupo a ser criado.

Digamos que agora, você crie um segundo grupo com a letra "b", seu código ficaria **(b)** e poderia ser referenciado com **\\\\2**.

Sabendo como criar os grupos e como referênciá-los, podemos montar um padrão de busca utilizando tanto os grupos quanto suas referência. Veja este exemplo:

```{r}
str_view_all(Str_Teste_5, "(a)(b)\\2\\1")
```

Neste exemplo, nosso padrão busca por "ba", atraveś de \\\\2\\\\1, desde que tenham precedência de "ab", através dos grupos (a)(b).

## Exemplo 3

Digamos que tenhamos a string "**Tem uma banana na mesa**". Queremos criar uma padrão que busque as letras "**nana**". Apesar de termos soluções mais simples, poderíamos criar um grupo contendo "na" e usar a ordem de referência para concluir a expressão:

```{r}
str_view_all("Tem uma banana na mesa", "(na)\\1")
```

## Exemplo 4

Neste exemplo, usaremos novamente a tabela **frutas**.

Aqui iremos obter o mesmo resultado para o Problema 4 descrito na seção [Quantificadores].

Porém agora vamos usar a função **str_replace**() e o suporte à **grupos** que acabamos de ver para atingir o mesmo resultado, ou seja, extrair apenas os números da coluna nova_string.

```{r}
frutas |> 
  mutate (numeros = str_replace(nova_string, ".+([0-9]).?([0-9]).+", "\\1\\2")) 
```

## Detalhes do exemplo

Observe que a função **str_replace**(), recebe dois padrões, sendo o primeiro de busca e o segundo daquilo que iremos substituir o primeiro.

Neste caso, nosso padrão de busca, encontra "qualquer caractere" "uma ou mais vezes", depois cria um "grupo com números de 0 a 9", seguido por "qualquer caractere zero ou uma vez" e depois cria o segundo "grupo com números de 0 à 9" e conclui com "qualquer caractere uma ou mais vezes".

Com nosso padrão de busca criado, iremos criar nosso padrão de substituição, ou seja, aquilo que for encontrado pelo padrão de busca, será substituído pelo padrão de substituição.

Nosso padrão de substituição ficou simples ("\\\\1\\\\2"). Veja que ele apenas pega o conteúdo do grupo 1 e grupo 2 criados no padrão de busca usando parênteses para substituir.

## Pesquisa ao Redor

Em alguns casos, precisamos criar um padrão que **olhe ao redor** para encontrar o que buscamos.

Há símbolos para definirmos grupos que estão **precedendo** o que buscamos e há símbolos para definirmos grupos que estão **posteriores** ao que buscamos. Há também símbolos para negar os casos anteriores e posteriores. Veja:

| Regex       | Busca             |
|-------------|-------------------|
| (**?=** )   | Seguido por       |
| (**?!** )   | Não seguido por   |
| (**?\<=** ) | Precedido por     |
| (**?\<!** ) | Não precedido por |

Para os exemplos a seguir utilizaremos a seguinte string de teste: Str_Teste_6 = "bacad"

```{r}
Str_Teste_6 <- "bacad"
Str_Teste_6
```

## Exemplo 1

Vamos criar um padrão de busca que localize a letra "a", mas queremos a(s) letra(s) "a" que são seguidas apenas pela letra "c".

Para isso iremos criar um grupo ("c"), mas como é um grupo que irá seguir aquilo que buscamos, ao invés dos parêntese apenas, iremos utilizar o símbolo da tabela anterior "?="a fazer (?=c). Depois adicionamos a busca pela letra "a".

```{r}
str_view_all(Str_Teste_6, "a(?=c)")
```

## Exemplo 2

Vamos criar um padrão de busca que localize a letra "a", mas queremos a(s) letra(s) "a" que são precedidas pela letra "b". Usando a mesma tabela e raciocínio do exemplo anterior, podemos criar o grupo com a letra b, mas como é um grupo de precedência, temos que adicionar os símbolos "?\<=" e fazer:

```{r}
str_view_all(Str_Teste_6, "(?<=b)a")
```

## Exemplo 3

Neste exemplo, usaremos novamente a tabela **frutas**.

Digamos que iremos filter as frutas que comecem com as letras "B" e "P" se forem seguidas das letras "e" e "l". Desta forma, não teremos na saída frutas como "Banana" ou "Pineapple"

```{r}
frutas |> 
  filter(str_detect(name, "^[BP](?=[el])")) 
```

##  {background-color="black"}

+----------+:----------------------------------------------:+----------+
|          |                                                |          |
+----------+------------------------------------------------+----------+
|          | ## **MUITO OBRIGADO!!!**                       |          |
+----------+------------------------------------------------+----------+
|          |                                                |          |
+----------+------------------------------------------------+----------+
